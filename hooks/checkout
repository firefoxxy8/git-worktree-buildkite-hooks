#!/bin/bash

set -e -o pipefail

# If enabled, automatically run an ssh-keyscan on the git ssh host, to prevent
# a yes/no promp from appearing when cloning/fetching
if [[ "${BUILDKITE_AUTO_SSH_FINGERPRINT_VERIFICATION:-}" == "true" ]]; then
  # Only bother running the keyscan if the SSH host has been provided by
  # Buildkite. It won't be present if the host isn't using the SSH protocol
  if [[ -n "${BUILDKITE_REPO_SSH_HOST:-}" ]]; then
    : "${BUILDKITE_SSH_DIRECTORY:="$HOME/.ssh"}"
    : "${BUILDKITE_SSH_KNOWN_HOST_PATH:="$BUILDKITE_SSH_DIRECTORY/known_hosts"}"

    # Ensure the known_hosts file exists
    mkdir -p "$BUILDKITE_SSH_DIRECTORY"
    touch "$BUILDKITE_SSH_KNOWN_HOST_PATH"

    # Only add the output from ssh-keyscan if it doesn't already exist in the
    # known_hosts file (unhashed or hashed).
    ssh-keygen -f "$BUILDKITE_SSH_KNOWN_HOST_PATH" -F "$BUILDKITE_REPO_SSH_HOST" > /dev/null ||
      ssh-keygen -f "$BUILDKITE_SSH_KNOWN_HOST_PATH" -F "$BUILDKITE_REPO_SSH_HOST" -H > /dev/null ||
      ssh-keyscan "$BUILDKITE_REPO_SSH_HOST" >> "$BUILDKITE_SSH_KNOWN_HOST_PATH"
  fi
fi

# Disable any interactive Git/SSH prompting
export GIT_TERMINAL_PROMPT=0

# Do we need to do a git clone?
if [[ ! -d "$BUILDKITE_REPO_PATH" ]]; then
  BUILDKITE_GIT_CLONE_FLAGS=${BUILDKITE_GIT_CLONE_FLAGS:--v}
  git clone "$BUILDKITE_GIT_CLONE_FLAGS" --bare -- "$BUILDKITE_REPO" "$BUILDKITE_REPO_PATH"
fi

# If there is a commit specified and it already exists in the repository then
# skip the fetch.
if [[ -n "$BUILDKITE_COMMIT" &&
      "$(git --git-dir="$BUILDKITE_REPO_PATH" rev-parse "$BUILDKITE_COMMIT")" == "$BUILDKITE_COMMIT" &&
      "$(git --git-dir="$BUILDKITE_REPO_PATH" cat-file -t "$BUILDKITE_COMMIT")" == "commit" ]]; then
  git --git-dir="$BUILDKITE_REPO_PATH" worktree add --force --detach "$PWD" "$BUILDKITE_COMMIT"

# GitHub has a special ref which lets us fetch a pull request head, whether
# or not there is a current head in this repository or another which
# references the commit. We presume a commit sha is provided. See:
# https://help.github.com/articles/checking-out-pull-requests-locally/#modifying-an-inactive-pull-request-locally
elif [[ "$BUILDKITE_PULL_REQUEST" != "false" &&
        "$BUILDKITE_PROJECT_PROVIDER" == *"github"* ]]; then
  git --git-dir="$BUILDKITE_REPO_PATH" fetch --verbose origin "+refs/pull/${BUILDKITE_PULL_REQUEST}/head:buildkite/jobs/${BUILDKITE_JOB_ID}"
  git --git-dir="$BUILDKITE_REPO_PATH" worktree add --force --detach "$PWD" "buildkite/jobs/${BUILDKITE_JOB_ID}"

# If the commit is "HEAD" then we can't do a commit-specific fetch and will
# need to fetch the remote head and checkout the fetched head explicitly.
elif [[ "$BUILDKITE_COMMIT" == "HEAD" ]]; then
  git --git-dir="$BUILDKITE_REPO_PATH" fetch --verbose origin "+${BUILDKITE_BRANCH}:buildkite/jobs/${BUILDKITE_JOB_ID}"
  git --git-dir="$BUILDKITE_REPO_PATH" worktree add --force --detach "$PWD" "buildkite/jobs/${BUILDKITE_JOB_ID}"

# Otherwise fetch and checkout the commit directly.
else
  # Some repositories don't support fetching a specific commit so we fall back to
  # fetching all heads and tags, hoping that the commit is included. But we try
  # the commit-specific first also because it may be a no-op.
  #
  # By default `git fetch origin` will only fetch tags which are reachable
  # from a fetched branch. git 1.9.0+ changed `--tags` to fetch all tags in
  # addition to the default refspec, but pre 1.9.0 it excludes the default
  # refspec. So we add an explicit tag refspec to the default refspec.
  git --git-dir="$BUILDKITE_REPO_PATH" fetch --verbose origin "$BUILDKITE_COMMIT" ||
    git --git-dir="$BUILDKITE_REPO_PATH" fetch --verbose origin "$(git config remote.origin.fetch)" "+refs/tags/*:refs/tags/*"
  git --git-dir="$BUILDKITE_REPO_PATH" worktree add --force --detach "$PWD" "$BUILDKITE_COMMIT"
fi

# Git submodules are a little flakey with worktrees, but let's see how we go.
if [[ -z "${BUILDKITE_DISABLE_GIT_SUBMODULES:-}" ]]; then
  # `submodule sync` will ensure the .git/config matches the .gitmodules file.
  # The command is only available in git version 1.8.1, so if the call fails,
  # continue the bootstrap script, and show an informative error.
  if ! git submodule sync --recursive; then
    echo "Warning: Failed to recursively sync git submodules. This is most likely because you have an older version of git installed ($(git --version)) and you need version 1.8.1 and above. If you're using submodules, it's highly recommended you upgrade if you can."
    echo "^^^ +++"
  fi

  git submodule update --init --recursive
  git submodule foreach --recursive git reset --hard
fi

# Populate build meta-data with commit details if they don't exist
if ! buildkite-agent meta-data exists "buildkite:git:commit"; then
  buildkite-agent meta-data set "buildkite:git:commit" "$(git show HEAD -s --format=fuller --no-color)"
  buildkite-agent meta-data set "buildkite:git:branch" "$(git branch --contains HEAD --no-color)"
fi
